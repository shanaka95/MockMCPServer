AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: MCP-compliant server using HTTP in Lambda

Parameters:
  DomainName:
    Type: String
    Default: "app.mockmcp.com"
    Description: "Custom domain name for the MCP API"
  HostedZoneId:
    Type: String
    Description: "The Route53 Hosted Zone ID for mockmcp.com (you can find this in Route53 console)"

Globals:
  Function:
    Timeout: 60
    Runtime: python3.12
    Architectures: [x86_64]

Resources:
  McpApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Auth:
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt McpAuthorizerFunction.Arn
            FunctionPayloadType: TOKEN
            Identity:
              ReauthorizeEvery: 300
              Header: Authorization
          CognitoAuthorizer:
            UserPoolArn: !GetAtt MockMcpUserPool.Arn
            Identity:
              Header: Authorization

  McpAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: authorizer/
      Environment:
        Variables:
          MCP_AUTH_TOKEN: "1234567890"
          USER_POOL_ID: !Ref MockMcpUserPool
          USER_POOL_CLIENT_ID: !Ref MockMcpUserPoolClient
          AWS_REGION: !Ref AWS::Region
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'lambda:InvokeFunction'
              Resource: '*'

  McpSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-mcp-sessions"
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true
      Tags:
        - Key: Purpose
          Value: MCP Session Management

  McpServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: server/
      Environment:
        Variables:
          MCP_SESSION_TABLE: !Ref McpSessionsTable
          USER_POOL_ID: !Ref MockMcpUserPool
          USER_POOL_CLIENT_ID: !Ref MockMcpUserPoolClient
          IDENTITY_POOL_ID: !Ref MockMcpIdentityPool
          AWS_REGION: !Ref AWS::Region
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:ListBuckets
                - s3:ListAllMyBuckets
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:CreateTable
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DescribeTable
              Resource: !GetAtt McpSessionsTable.Arn
      Events:
        McpAPI:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref McpApi
            # Auth:
            #   Authorizer: TokenAuthorizer
        McpAPIRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref McpApi
            # Auth:
            #   Authorizer: TokenAuthorizer

  # SSL Certificate for REGIONAL API Gateway
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-api-certificate"

  # Custom Domain for API Gateway (REGIONAL)
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref ApiCertificate
      SecurityPolicy: TLS_1_2
      EndpointConfiguration:
        Types:
          - REGIONAL
    DependsOn:
      - ApiCertificate

  # Domain mapping to API Gateway stage
  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref McpApi
      Stage: Prod
    DependsOn:
      - ApiDomainName
      - McpApiProdStage

  # Route53 record to point to API Gateway (REGIONAL)
  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId
    DependsOn:
      - ApiDomainName

  # Cognito User Pool
  MockMcpUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "MockMCP-UserPool"
      # Account Recovery and Security
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      # Password Policy - Production Settings
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      # User Attributes
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
      # Email Configuration
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      # Verification Messages
      EmailVerificationMessage: "Your MockMCP verification code is {####}"
      EmailVerificationSubject: "Your MockMCP verification code"
      # User Pool Add-ons
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED
      # Deletion Protection
      DeletionProtection: ACTIVE
      # Device Configuration
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: true

  # Cognito User Pool Client
  MockMcpUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MockMcpUserPool
      ClientName: !Sub "MockMCP-WebClient"
      # Auth Flows
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      # Token Configuration
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      # OAuth Configuration
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - !Sub "https://${DomainName}/login/callback"
        - "http://localhost:5173/login/callback"
      LogoutURLs:
        - !Sub "https://${DomainName}/logout"
        - "http://localhost:5173/logout"
      # Security
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true
      # Attribute Permissions
      ReadAttributes:
        - email
        - name
        - email_verified
      WriteAttributes:
        - email
        - name

  # Cognito User Pool Domain
  MockMcpUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "mockmcp-${AWS::AccountId}"
      UserPoolId: !Ref MockMcpUserPool

  # Cognito Identity Pool (for AWS SDK access if needed)
  MockMcpIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "MockMCP_IdentityPool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref MockMcpUserPoolClient
          ProviderName: !GetAtt MockMcpUserPool.ProviderName

  # IAM Role for Authenticated Users
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref MockMcpIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoAuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref MockMcpIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

Outputs:
  MCPServerApi:
    Description: "API Gateway endpoint URL for MCP server"
    Value: !Sub "https://${McpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/mcp"
  McpCustomDomainApi:
    Description: "Custom domain URL for MCP server"
    Value: !Sub "https://${DomainName}"
  McpSessionsTableName:
    Description: "Name of the DynamoDB table for MCP sessions"
    Value: !Ref McpSessionsTable
  CertificateArn:
    Description: "ARN of the SSL certificate"
    Value: !Ref ApiCertificate